// <auto-generated />
using System;
using CW11.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CW11.Infrastructure.Migrations
{
    [DbContext(typeof(HospitalContext))]
    partial class HospitalContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CW11.Application.Model.Doctor", b =>
                {
                    b.Property<int>("IdDoctor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdDoctor");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            IdDoctor = -1,
                            Email = "mail@mail.com",
                            FirstName = "Jan",
                            LastName = "Kowalski"
                        },
                        new
                        {
                            IdDoctor = -2,
                            Email = "p.zak@gmail.com",
                            FirstName = "Przemyslaw",
                            LastName = "Zakala"
                        },
                        new
                        {
                            IdDoctor = -3,
                            Email = "pulpet@hotmail.com",
                            FirstName = "Jaroslaw",
                            LastName = "Pulpet"
                        });
                });

            modelBuilder.Entity("CW11.Application.Model.Medicament", b =>
                {
                    b.Property<int>("IdMedicament")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdMedicament");

                    b.ToTable("Medicament");

                    b.HasData(
                        new
                        {
                            IdMedicament = -1,
                            Description = " 100 mg",
                            Name = "wit. c",
                            Type = "powlekane"
                        },
                        new
                        {
                            IdMedicament = -2,
                            Description = " 1000 mg",
                            Name = "wit. d",
                            Type = "kapsulka"
                        },
                        new
                        {
                            IdMedicament = -3,
                            Description = "steryd",
                            Name = "metmin",
                            Type = "aerozol"
                        });
                });

            modelBuilder.Entity("CW11.Application.Model.Patient", b =>
                {
                    b.Property<int>("IdPatient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPatient");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            IdPatient = -1,
                            BirthDate = new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Jan",
                            LastName = "Kowalski"
                        },
                        new
                        {
                            IdPatient = -2,
                            BirthDate = new DateTime(2000, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Bolek",
                            LastName = "Dom"
                        },
                        new
                        {
                            IdPatient = -3,
                            BirthDate = new DateTime(1980, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Lolek",
                            LastName = "Cis"
                        });
                });

            modelBuilder.Entity("CW11.Application.Model.Prescription", b =>
                {
                    b.Property<int>("IdPrescription")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DoctorIdDoctor")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PatientIdPatient")
                        .HasColumnType("int");

                    b.HasKey("IdPrescription");

                    b.HasIndex("DoctorIdDoctor");

                    b.HasIndex("PatientIdPatient");

                    b.ToTable("Prescriptions");

                    b.HasData(
                        new
                        {
                            IdPrescription = -1,
                            Date = new DateTime(2020, 6, 21, 21, 47, 10, 718, DateTimeKind.Utc).AddTicks(5556),
                            DoctorIdDoctor = -1,
                            DueDate = new DateTime(2020, 6, 23, 21, 47, 10, 718, DateTimeKind.Utc).AddTicks(5566),
                            PatientIdPatient = -1
                        },
                        new
                        {
                            IdPrescription = -2,
                            Date = new DateTime(2020, 6, 21, 21, 47, 10, 718, DateTimeKind.Utc).AddTicks(6528),
                            DoctorIdDoctor = -2,
                            DueDate = new DateTime(2020, 6, 23, 21, 47, 10, 718, DateTimeKind.Utc).AddTicks(6532),
                            PatientIdPatient = -1
                        },
                        new
                        {
                            IdPrescription = -3,
                            Date = new DateTime(2020, 6, 21, 21, 47, 10, 718, DateTimeKind.Utc).AddTicks(6589),
                            DoctorIdDoctor = -1,
                            DueDate = new DateTime(2020, 6, 25, 21, 47, 10, 718, DateTimeKind.Utc).AddTicks(6590),
                            PatientIdPatient = -3
                        });
                });

            modelBuilder.Entity("CW11.Application.Model.PrescriptionMedicament", b =>
                {
                    b.Property<int>("MedicamentId")
                        .HasColumnType("int");

                    b.Property<int>("PrescriptionId")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Dose")
                        .HasColumnType("int");

                    b.HasKey("MedicamentId", "PrescriptionId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("PrescriptionMedicament");

                    b.HasData(
                        new
                        {
                            MedicamentId = -1,
                            PrescriptionId = -2,
                            Details = "codziennie",
                            Dose = 3
                        },
                        new
                        {
                            MedicamentId = -2,
                            PrescriptionId = -3,
                            Details = "dwa razy dziennie",
                            Dose = 4
                        },
                        new
                        {
                            MedicamentId = -3,
                            PrescriptionId = -1,
                            Details = ""
                        });
                });

            modelBuilder.Entity("CW11.Application.Model.Prescription", b =>
                {
                    b.HasOne("CW11.Application.Model.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorIdDoctor");

                    b.HasOne("CW11.Application.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientIdPatient");
                });

            modelBuilder.Entity("CW11.Application.Model.PrescriptionMedicament", b =>
                {
                    b.HasOne("CW11.Application.Model.Medicament", "Medicament")
                        .WithMany()
                        .HasForeignKey("MedicamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CW11.Application.Model.Prescription", "Prescription")
                        .WithMany()
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
